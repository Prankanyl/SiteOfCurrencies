#pragma checksum "/Users/Valera/Projects/SiteOfCurrencies/SiteOfCurrencies/Pages/ListCurrency.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e560a5e4601c70efe0e2ed71c4452b933057ca33"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(SiteOfCurrencies.Pages.Pages_ListCurrency), @"mvc.1.0.razor-page", @"/Pages/ListCurrency.cshtml")]
namespace SiteOfCurrencies.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/Valera/Projects/SiteOfCurrencies/SiteOfCurrencies/Pages/_ViewImports.cshtml"
using SiteOfCurrencies;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e560a5e4601c70efe0e2ed71c4452b933057ca33", @"/Pages/ListCurrency.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"01441299ffa739fc7eefd25782cc145b0d3faaa9", @"/Pages/_ViewImports.cshtml")]
    public class Pages_ListCurrency : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "11", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "6", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "8", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "9", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "4", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "7", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "5", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "12", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "/Users/Valera/Projects/SiteOfCurrencies/SiteOfCurrencies/Pages/ListCurrency.cshtml"
  
    ViewData["Title"] = "Список валют";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    p {
        font-family: 'Times New Roman', Times, serif;
        text-align: justify;
        font-style: italic;
        font-size: 14pt;
    }
    span {
        color: #ffffff;
        font-family: 'Times New Roman', Times, serif;
        font-size: 14pt;
    }
</style>
<script type=""text/javascript"" src=""https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js""></script>
    <script type=""text/javascript"">
        var uri = 'https://www.nbrb.by/API/';
        $(function () {
            $('#mode').change(function () {
                $('#res').empty();
                switch ($('#mode').val()) {
                    case '0':
                        $('#onDate').hide();
                        $('#Cur').hide();
                        $('#period').hide();
                        break;
                    case '1':
                        $('#onDate').hide();
                        $('#Cur').show();
                        $('#period').hide();
                        break;
           ");
            WriteLiteral(@"         case '2':
                    case '10':
                    case '11':
                        $('#onDate').show();
                        $('#Cur').show();
                        $('#period').hide();
                        break;
                    case '6':
                    case '8':
                    case '9':
                        $('#onDate').hide();
                        $('#Cur').show();
                        $('#period').hide();
                        break;                    
		            case '3':
                        $('#onDate').hide();
                        $('#Cur').show();
                        $('#period').show();
                        break;
                    case '4':
                    case '5':
                        $('#onDate').show();
                        $('#Cur').hide();
                        $('#period').hide();
                        break;
                   case '7':
                        $('#onDate').hide();
                       ");
            WriteLiteral(@" $('#Cur').hide();
                        $('#period').hide();
                        break;
                };
            });
            $('#btn').click(function () {
                $('#res').empty();
                //$('#btn').attr(""disabled"", ""disabled"");
                switch ($('#mode').val()) {
                    case '0':
                        currencies();
                        break;
                    case '1':
                        currency();
                        break;
                    case '2':
                        rate(0);
                        break;
                    case '3':
                        ratedyn();
                        break;
                    case '4':
                        rates(0);
                        break;
                    case '5':
                        rates(1);
                        break;
		            case '6':
                        ratetoday(0);
                        break;
                    case '7':
                ");
            WriteLiteral(@"        ratestoday(0);
                        break;
                    case '8':
                        ratetoday(1);
                        break;
                    case '9':
                        ratetoday(2);
                        break;
                    case '10':
                        rate(1);
                        break;
                    case '11':
                        rate(2);
                        break;
                    case '12':
                        currenciesjson();
                        break;

                }
            });
        });
        function currenciesjson() {
            $.getJSON(uri + 'ExRates/Currencies')
                .done(function (data) {
                    $.each(data, function (key, item) {
                        $('<li>', { text: JSON.stringify(item) }).appendTo($('#res'));
                    });
                    $('#btn').removeAttr(""disabled"");
                }).error(function (err) {
                    $('#btn').removeAttr(""");
            WriteLiteral(@"disabled"");
                    alert('ошибка');
                });
        };
        function currencies() {
            $.getJSON(uri + 'ExRates/Currencies').done(function (data)
            {
                  $.each(data, function (key, item) 
                  {
                      $('<p>', { text: 'Внутренний код: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>',{ text: 'Код используется для связи: ' + item.Cur_ID  }).appendTo($('#res'));
                      $('<p>',{ text: 'Цифровой код: ' + item.Cur_Code  }).appendTo($('#res'));  
                      $('<p>', { text: 'Буквенный код: ' + item.Cur_Abbreviation }).appendTo($('#res'));
                      $('<p>',{ text: 'Наименование валюты на русском языке: ' + item.Cur_Name   }).appendTo($('#res'));
                      $('<p>',{ text: 'Наименование на белорусском языке: ' + item.Cur_Name_Bel  }).appendTo($('#res'));  
                      $('<p>', { text: 'Наименование на английском языке: ' + item.Cur_Name_Eng }).appe");
            WriteLiteral(@"ndTo($('#res'));
                      $('<p>',{ text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + item.Cur_QuotName  }).appendTo($('#res'));
                      $('<p>',{ text: 'Наименование на белорусском языке, содержащее количество единиц: ' + item.Cur_QuotName_Bel  }).appendTo($('#res'));  
                      $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + item.Cur_QuotName_Eng }).appendTo($('#res'));
                      $('<p>',{ text: 'Наименование валюты на русском языке во множественном числе: ' + item.Cur_NameMulti  }).appendTo($('#res'));
                      $('<p>',{ text: 'Наименование валюты на белорусском языке во множественном числе: ' + item.Cur_Name_BelMulti  }).appendTo($('#res'));  
                      $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + item.Cur_Name_EngMulti }).appendTo($('#res'));
                      $('<p>',{ text: 'Количество единиц иностранной валюты: ' + item.Cu");
            WriteLiteral(@"r_Scale  }).appendTo($('#res'));
                      $('<p>',{ text: 'Периодичность установления курса: ' + item.Cur_Periodicity  }).appendTo($('#res'));  
                      $('<p>', { text: 'Дата включения валюты в перечень валют: ' + item.Cur_DateStart }).appendTo($('#res'));
                      $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + item.Cur_DateEnd  }).appendTo($('#res')); 
                      $('<hr>',{ text: ''}).appendTo($('#res')); 
                  });
                  $('#btn').removeAttr(""disabled"");
            }).error(function (err) {
                  $('#btn').removeAttr(""disabled"");
                  alert('ошибка');
            });
        };
        async function CheckElementExist() {
            var Id = $('#iCur').val();
            var Url = 'https://www.nbrb.by/API/ExRates/Currencies/';
            Id = Id !== undefined ? Id : '';



            await fetch(`${Url}/${Id}`)
                .then((response) => {

                    if (response.code =");
            WriteLiteral(@"= 404) {
                        return new Error('No data in Request');
                    }

                })
                .then((data) => {
                    return (data)
                    alert(data);
                    console.log(data);
                });

        }
        function currency() {
            
            $.getJSON(uri + 'ExRates/Currencies/' + $('#iCur').val())
                .done(function (data) {
                    $('<p>', { text: 'Внутренний код: ' + data.Cur_ID }).appendTo($('#res'));
                    $('<p>', { text: 'Код используется для связи: ' + data.Cur_ID }).appendTo($('#res'));
                    $('<p>', { text: 'Цифровой код: ' + data.Cur_Code }).appendTo($('#res'));
                    $('<p>', { text: 'Буквенный код: ' + data.Cur_Abbreviation }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование валюты на русском языке: ' + data.Cur_Name }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование на белорусском язык");
            WriteLiteral(@"е: ' + data.Cur_Name_Bel }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование на английском языке: ' + data.Cur_Name_Eng }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + data.Cur_QuotName }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + data.Cur_QuotName_Bel }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + data.Cur_QuotName_Eng }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование валюты на русском языке во множественном числе: ' + data.Cur_NameMulti }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + data.Cur_Name_BelMulti }).appendTo($('#res'));
                    $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + d");
            WriteLiteral(@"ata.Cur_Name_EngMulti }).appendTo($('#res'));
                    $('<p>', { text: 'Количество единиц иностранной валюты: ' + data.Cur_Scale }).appendTo($('#res'));
                    $('<p>', { text: 'Периодичность установления курса: ' + data.Cur_Periodicity }).appendTo($('#res'));
                    $('<p>', { text: 'Дата включения валюты в перечень валют: ' + data.Cur_DateStart }).appendTo($('#res'));
                    $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + data.Cur_DateEnd }).appendTo($('#res'));
                    $('<hr>', { text: '' }).appendTo($('#res'));
                }).error(function (err) {
                    $('#btn').removeAttr(""disabled"");
                    alert('ошибка');
                });
        };

            function parseRuDate(s) {
                var parts = s.split('.');
                if (parts.length != 3) return NaN;

                parts[0] = parseInt(parts[0], 10);
                parts[1] = parseInt(parts[1], 10);
                parts[2] ");
            WriteLiteral(@"= parseInt(parts[2], 10);

                if (isNaN(parts[0]) || isNaN(parts[1]) || isNaN(parts[2])) return NaN;
                if (parts[0] < 0 || parts[1] < 0 || parts[2] < 0) return NaN;

                return new Date(parts[2], parts[1]-1, parts[0]);
            };

            function rates(p) {
                $.getJSON(uri + 'ExRates/Rates', { 'onDate': parseRuDate($('#iDate').val()).toUTCString(), 'Periodicity': p })
              .done(function (data) {
                  $.each(data, function (key, item) {
                      $('<p>', { text: 'Внутренний код: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>', { text: 'Код используется для связи: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>', { text: 'Цифровой код: ' + item.Cur_Code }).appendTo($('#res'));
                      $('<p>', { text: 'Буквенный код: ' + item.Cur_Abbreviation }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке: ' + item.Cur_Nam");
            WriteLiteral(@"e }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке: ' + item.Cur_Name_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке: ' + item.Cur_Name_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + item.Cur_QuotName }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + item.Cur_QuotName_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + item.Cur_QuotName_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке во множественном числе: ' + item.Cur_NameMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + item.Cur_Name_BelMulti }).appendTo($(");
            WriteLiteral(@"'#res'));
                      $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + item.Cur_Name_EngMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Количество единиц иностранной валюты: ' + item.Cur_Scale }).appendTo($('#res'));
                      $('<p>', { text: 'Периодичность установления курса: ' + item.Cur_Periodicity }).appendTo($('#res'));
                      $('<p>', { text: 'Дата включения валюты в перечень валют: ' + item.Cur_DateStart }).appendTo($('#res'));
                      $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + item.Cur_DateEnd }).appendTo($('#res'));
                      $('<hr>', { text: '' }).appendTo($('#res')); 
                  });
                  $('#btn').removeAttr(""disabled"");
              }).error(function (err) {
                  $('#btn').removeAttr(""disabled"");
                  alert('ошибка');
              });
            };

           function ratestoday(p) {
                $.getJSON(uri ");
            WriteLiteral(@"+ 'ExRates/Rates', {'Periodicity': p })
              .done(function (data) {
                  $.each(data, function (key, item) {
                      $('<p>', { text: 'Внутренний код: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>', { text: 'Код используется для связи: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>', { text: 'Цифровой код: ' + item.Cur_Code }).appendTo($('#res'));
                      $('<p>', { text: 'Буквенный код: ' + item.Cur_Abbreviation }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке: ' + item.Cur_Name }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке: ' + item.Cur_Name_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке: ' + item.Cur_Name_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + item.Cur_QuotN");
            WriteLiteral(@"ame }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + item.Cur_QuotName_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + item.Cur_QuotName_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке во множественном числе: ' + item.Cur_NameMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + item.Cur_Name_BelMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + item.Cur_Name_EngMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Количество единиц иностранной валюты: ' + item.Cur_Scale }).appendTo($('#res'));
                      $('<p>', { text: 'Периодичность установления курса: ' + item.Cur_Periodicity }).appendTo($('");
            WriteLiteral(@"#res'));
                      $('<p>', { text: 'Дата включения валюты в перечень валют: ' + item.Cur_DateStart }).appendTo($('#res'));
                      $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + item.Cur_DateEnd }).appendTo($('#res'));
                      $('<hr>', { text: '' }).appendTo($('#res')); 
                  });
                  $('#btn').removeAttr(""disabled"");
              }).error(function (err) {
                  $('#btn').removeAttr(""disabled"");
                  alert('ошибка');
              });
            };
            function rate(p) {
                $.getJSON(uri + 'ExRates/Rates/' + $('#iCur').val(), { 'onDate': parseRuDate($('#iDate').val()).toUTCString(), 'ParamMode': p })
              .done(function (data) {
                  $('<p>', { text: 'Внутренний код: ' + data.Cur_ID }).appendTo($('#res'));
                  $('<p>', { text: 'Код используется для связи: ' + data.Cur_ID }).appendTo($('#res'));
                  $('<p>', { text: 'Цифровой код: ");
            WriteLiteral(@"' + data.Cur_Code }).appendTo($('#res'));
                  $('<p>', { text: 'Буквенный код: ' + data.Cur_Abbreviation }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на русском языке: ' + data.Cur_Name }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на белорусском языке: ' + data.Cur_Name_Bel }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке: ' + data.Cur_Name_Eng }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + data.Cur_QuotName }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + data.Cur_QuotName_Bel }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + data.Cur_QuotName_Eng }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на русском языке во множе");
            WriteLiteral(@"ственном числе: ' + data.Cur_NameMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + data.Cur_Name_BelMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + data.Cur_Name_EngMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Количество единиц иностранной валюты: ' + data.Cur_Scale }).appendTo($('#res'));
                  $('<p>', { text: 'Периодичность установления курса: ' + data.Cur_Periodicity }).appendTo($('#res'));
                  $('<p>', { text: 'Дата включения валюты в перечень валют: ' + data.Cur_DateStart }).appendTo($('#res'));
                  $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + data.Cur_DateEnd }).appendTo($('#res'));
                  $('<hr>', { text: '' }).appendTo($('#res')); 
                  $('#btn').removeAttr(""disabled"");
              }).error(function (err) {
                  $('#btn').");
            WriteLiteral(@"removeAttr(""disabled"");
                  alert('ошибка');
              });
            };

            function ratetoday(p) {
             $.getJSON(uri + 'ExRates/Rates/' + $('#iCur').val(), { 'ParamMode': p })
              .done(function (data) {
                  $('<p>', { text: 'Внутренний код: ' + data.Cur_ID }).appendTo($('#res'));
                  $('<p>', { text: 'Код используется для связи: ' + data.Cur_ID }).appendTo($('#res'));
                  $('<p>', { text: 'Цифровой код: ' + data.Cur_Code }).appendTo($('#res'));
                  $('<p>', { text: 'Буквенный код: ' + data.Cur_Abbreviation }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на русском языке: ' + data.Cur_Name }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на белорусском языке: ' + data.Cur_Name_Bel }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке: ' + data.Cur_Name_Eng }).appendTo($('#res'));
                  $('<p>', { text");
            WriteLiteral(@": 'Наименование валюты на русском языке, содержащее количество единиц: ' + data.Cur_QuotName }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + data.Cur_QuotName_Bel }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке, содержащее количество единиц: ' + data.Cur_QuotName_Eng }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на русском языке во множественном числе: ' + data.Cur_NameMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + data.Cur_Name_BelMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + data.Cur_Name_EngMulti }).appendTo($('#res'));
                  $('<p>', { text: 'Количество единиц иностранной валюты: ' + data.Cur_Scale }).appendTo($('#res'));
                  $('<p>', { text: 'Периодичность");
            WriteLiteral(@" установления курса: ' + data.Cur_Periodicity }).appendTo($('#res'));
                  $('<p>', { text: 'Дата включения валюты в перечень валют: ' + data.Cur_DateStart }).appendTo($('#res'));
                  $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + data.Cur_DateEnd }).appendTo($('#res'));
                  $('<hr>', { text: '' }).appendTo($('#res')); 
                  $('#btn').removeAttr(""disabled"");
              }).error(function (err) {
                  $('#btn').removeAttr(""disabled"");
                  alert('ошибка');
              });
            };
              function ratedyn() {
                  $.getJSON(uri + 'ExRates/Rates/Dynamics/' + $('#iCur').val(), { 'startDate': parseRuDate($('#ifrom').val()).toUTCString(), 'endDate': parseRuDate($('#ito').val()).toUTCString() })
              .done(function (data) {
                  $.each(data, function (key, item) {
                      $('<p>', { text: 'Внутренний код: ' + item.Cur_ID }).appendTo($('#res'));
            ");
            WriteLiteral(@"          $('<p>', { text: 'Код используется для связи: ' + item.Cur_ID }).appendTo($('#res'));
                      $('<p>', { text: 'Цифровой код: ' + item.Cur_Code }).appendTo($('#res'));
                      $('<p>', { text: 'Буквенный код: ' + item.Cur_Abbreviation }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке: ' + item.Cur_Name }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке: ' + item.Cur_Name_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке: ' + item.Cur_Name_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке, содержащее количество единиц: ' + item.Cur_QuotName }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на белорусском языке, содержащее количество единиц: ' + item.Cur_QuotName_Bel }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на а");
            WriteLiteral(@"нглийском языке, содержащее количество единиц: ' + item.Cur_QuotName_Eng }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на русском языке во множественном числе: ' + item.Cur_NameMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование валюты на белорусском языке во множественном числе: ' + item.Cur_Name_BelMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Наименование на английском языке во множественном числе: ' + item.Cur_Name_EngMulti }).appendTo($('#res'));
                      $('<p>', { text: 'Количество единиц иностранной валюты: ' + item.Cur_Scale }).appendTo($('#res'));
                      $('<p>', { text: 'Периодичность установления курса: ' + item.Cur_Periodicity }).appendTo($('#res'));
                      $('<p>', { text: 'Дата включения валюты в перечень валют: ' + item.Cur_DateStart }).appendTo($('#res'));
                      $('<p>', { text: 'Дата исключения валюты из перечня валют: ' + item.Cur_DateEnd })");
            WriteLiteral(@".appendTo($('#res'));
                      $('<hr>', { text: '' }).appendTo($('#res')); 
                  });
                  $('#btn').removeAttr(""disabled"");
              }).error(function (err) {
                  $('#btn').removeAttr(""disabled"");
                  alert('ошибка');
              });
              }
    </script>
    <div class=""container-fluid"" style=""background-color: #676dc5;"">
        <h3 align=""center"" style=""color: #ffffff"">
            <b>API Национального банка для получения официального курса белорусского рубля по отношению к иностранным валютам.</b>
        </h3>
        <select id=""mode"" style=""text-align: center; "">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3331835", async() => {
                WriteLiteral("справочник валют");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3333001", async() => {
                WriteLiteral("описание валюты");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3334166", async() => {
                WriteLiteral("курс валюты на дату");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3335335", async() => {
                WriteLiteral("курс валюты на дату по цифровому коду валюты (ИСО 4217)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3336540", async() => {
                WriteLiteral("курс валюты на дату по буквенному коду валюты (ИСО 4217)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3337746", async() => {
                WriteLiteral("курс валюты на сегодня");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3338918", async() => {
                WriteLiteral("курс валюты на сегодня по цифровому коду валюты (ИСО 4217)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3340126", async() => {
                WriteLiteral("курс валюты на сегодня по буквенному коду валюты (ИСО 4217)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3341335", async() => {
                WriteLiteral("курс валюты за период");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3342506", async() => {
                WriteLiteral("все курсы, устанавливаемые ежедневно на дату");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3343700", async() => {
                WriteLiteral("все курсы, устанавливаемые ежедневно на сегодня");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3344899", async() => {
                WriteLiteral("все курсы, устанавливаемые ежемесячно");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e560a5e4601c70efe0e2ed71c4452b933057ca3346088", async() => {
                WriteLiteral("справочник валют(ответ в json)");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </select>
        <span id=""onDate"" style=""display: none"">На дату:<input type=""text"" id=""iDate"" placeholder=""Например: 1991-01-01T00:00:00"" /></span>
        <span id=""Cur"" style=""display: none"">Идентификационный номер валюты: <input type=""text"" id=""iCur"" placeholder=""Например: 1"" /></span>
        <span id=""period"" style=""display: none"">с: <input type=""text"" id=""ifrom"" placeholder=""Например: 1991-01-01T00:00:00"" /> по: <input type=""text"" id=""ito"" placeholder=""Например: 2007-11-30T00:00:00"" /></span>
        <input class=""btn btn-info"" type=""button"" id=""btn"" value=""получить"" style=""text-align: center"" />
        <br />
        <br />
    </div>
<div class=""container-fluid"">
    <div id=""res"">

    </div>
</div>


");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_ListCurrency> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_ListCurrency> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_ListCurrency>)PageContext?.ViewData;
        public Pages_ListCurrency Model => ViewData.Model;
    }
}
#pragma warning restore 1591
